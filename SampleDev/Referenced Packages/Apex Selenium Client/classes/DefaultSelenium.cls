/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global class DefaultSelenium {
    global DefaultSelenium(selenium1.CommandProcessor aCommandProcessor) {

    }
    global DefaultSelenium(String url, String server, Integer port, String browser) {

    }
    global void addCustomRequestHeader(String key, String value) {

    }
    global void addLocationStrategy(String strategyName, String functionDefinition) {

    }
    global void addScript(String scriptContent, String scriptTagId) {

    }
    global void addSelection(String locator, String optionLocator) {

    }
    global void allowNativeXpath(String allow) {

    }
    global void altKeyDown() {

    }
    global void altKeyUp() {

    }
    global void answerOnNextPrompt(String answer) {

    }
    global void assignId(String locator, String identifier) {

    }
    global void attachFile(String fieldLocator, String fileLocator) {

    }
    global void captureEntirePageScreenshot(String filename, String kwargs) {

    }
    global String captureEntirePageScreenshotToString(String kwargs) {
        return null;
    }
    global String captureNetworkTraffic(String datatype) {
        return null;
    }
    global void captureScreenshot(String filename) {

    }
    global String captureScreenshotToString() {
        return null;
    }
    global void check(String locator) {

    }
    global void chooseCancelOnNextConfirmation() {

    }
    global void chooseOkOnNextConfirmation() {

    }
    global void click(String locator) {

    }
    global void clickAndWait(String field) {

    }
    global void clickAt(String locator, String coordString) {

    }
    global void close() {

    }
    global void contextMenu(String locator) {

    }
    global void contextMenuAt(String locator, String coordString) {

    }
    global void controlKeyDown() {

    }
    global void controlKeyUp() {

    }
    global void createCookie(String nameValuePair, String optionsString) {

    }
    global void deleteAllVisibleCookies() {

    }
    global void deleteCookie(String name, String optionsString) {

    }
    global void deselectPopUp() {

    }
    global void doubleClick(String locator) {

    }
    global void doubleClickAt(String locator, String coordString) {

    }
    global void dragAndDrop(String locator, String movementsString) {

    }
    global void dragAndDropToObject(String locatorOfObjectToBeDragged, String locatorOfDragDestinationObject) {

    }
    global void dragdrop(String locator, String movementsString) {

    }
    global String fireEvent(String locator, String eventName) {
        return null;
    }
    global void focus(String locator) {

    }
    global String getAlert() {
        return null;
    }
    global List<String> getAllButtons() {
        return null;
    }
    global List<String> getAllFields() {
        return null;
    }
    global List<String> getAllLinks() {
        return null;
    }
    global List<String> getAllWindowIds() {
        return null;
    }
    global List<String> getAllWindowNames() {
        return null;
    }
    global List<String> getAllWindowTitles() {
        return null;
    }
    global String getAttribute(String attributeLocator) {
        return null;
    }
    global List<String> getAttributeFromAllWindows(String attributeName) {
        return null;
    }
    global String getBodyText() {
        return null;
    }
    global String getConfirmation() {
        return null;
    }
    global String getCookie() {
        return null;
    }
    global String getCookieByName(String name) {
        return null;
    }
    global Double getCursorPosition(String locator) {
        return null;
    }
    global Double getElementHeight(String locator) {
        return null;
    }
    global Double getElementIndex(String locator) {
        return null;
    }
    global Double getElementPositionLeft(String locator) {
        return null;
    }
    global Double getElementPositionTop(String locator) {
        return null;
    }
    global Double getElementWidth(String locator) {
        return null;
    }
    global String getEval(String script) {
        return null;
    }
    global String getExpression(String expression) {
        return null;
    }
    global String getHtmlSource() {
        return null;
    }
    global String getLocation() {
        return null;
    }
    global String getLog() {
        return null;
    }
    global Double getMouseSpeed() {
        return null;
    }
    global String getPrompt() {
        return null;
    }
    global List<String> getSelectOptions(String selectLocator) {
        return null;
    }
    global String getSelectedId(String selectLocator) {
        return null;
    }
    global List<String> getSelectedIds(String selectLocator) {
        return null;
    }
    global String getSelectedIndex(String selectLocator) {
        return null;
    }
    global List<String> getSelectedIndexes(String selectLocator) {
        return null;
    }
    global String getSelectedLabel(String selectLocator) {
        return null;
    }
    global List<String> getSelectedLabels(String selectLocator) {
        return null;
    }
    global String getSelectedValue(String selectLocator) {
        return null;
    }
    global List<String> getSelectedValues(String selectLocator) {
        return null;
    }
    global String getSpeed() {
        return null;
    }
    global String getTable(String tableCellAddress) {
        return null;
    }
    global String getText(String locator) {
        return null;
    }
    global String getTitle() {
        return null;
    }
    global String getValue(String locator) {
        return null;
    }
    global Boolean getWhetherThisFrameMatchFrameExpression(String currentFrameString, String target) {
        return null;
    }
    global Boolean getWhetherThisWindowMatchWindowExpression(String currentWindowString, String target) {
        return null;
    }
    global Double getXpathCount(String xpath) {
        return null;
    }
    global void goBack() {

    }
    global void highlight(String locator) {

    }
    global void ignoreAttributesWithoutValue(String ignore) {

    }
    global Boolean isAlertPresent() {
        return null;
    }
    global Boolean isChecked(String locator) {
        return null;
    }
    global Boolean isConfirmationPresent() {
        return null;
    }
    global Boolean isCookiePresent(String name) {
        return null;
    }
    global Boolean isEditable(String locator) {
        return null;
    }
    global Boolean isElementPresent(String locator) {
        return null;
    }
    global Boolean isOrdered(String locator1, String locator2) {
        return null;
    }
    global Boolean isPromptPresent() {
        return null;
    }
    global Boolean isSomethingSelected(String selectLocator) {
        return null;
    }
    global Boolean isTextPresent(String pattern) {
        return null;
    }
    global Boolean isVisible(String locator) {
        return null;
    }
    global void keyDown(String locator, String keySequence) {

    }
    global void keyDownNative(String keycode) {

    }
    global void keyPress(String locator, String keySequence) {

    }
    global void keyPressNative(String keycode) {

    }
    global void keyUp(String locator, String keySequence) {

    }
    global void keyUpNative(String keycode) {

    }
    global void metaKeyDown() {

    }
    global void metaKeyUp() {

    }
    global void mouseDown(String locator) {

    }
    global void mouseDownAt(String locator, String coordString) {

    }
    global void mouseDownRight(String locator) {

    }
    global void mouseDownRightAt(String locator, String coordString) {

    }
    global void mouseMove(String locator) {

    }
    global void mouseMoveAt(String locator, String coordString) {

    }
    global void mouseOut(String locator) {

    }
    global void mouseOver(String locator) {

    }
    global void mouseUp(String locator) {

    }
    global void mouseUpAt(String locator, String coordString) {

    }
    global void mouseUpRight(String locator) {

    }
    global void mouseUpRightAt(String locator, String coordString) {

    }
    global void open(String url) {

    }
    global void open(String url, String ignoreResponseCode) {

    }
    global void openWindow(String url, String windowID) {

    }
    global void refresh() {

    }
    global void removeAllSelections(String locator) {

    }
    global void removeScript(String scriptTagId) {

    }
    global void removeSelection(String locator, String optionLocator) {

    }
    global String retrieveLastRemoteControlLogs() {
        return null;
    }
    global void rollup(String rollupName, String kwargs) {

    }
    global void runScript(String script) {

    }
    global void selectFrame(String locator) {

    }
    global void selectOption(String selectLocator, String optionLocator) {

    }
    global void selectPopUp(String windowID) {

    }
    global void selectWindow(String windowID) {

    }
    global void setBrowserLogLevel(String logLevel) {

    }
    global void setContext(String context) {

    }
    global void setCursorPosition(String locator, String position) {

    }
    global void setExtensionJs(String extensionJs) {

    }
    global void setMouseSpeed(String pixels) {

    }
    global void setSpeed(String value) {

    }
    global void setTimeout(String timeout) {

    }
    global void shiftKeyDown() {

    }
    global void shiftKeyUp() {

    }
    global void showContextualBanner() {

    }
    global void showContextualBanner(String className, String methodName) {

    }
    global void shutDownSeleniumServer() {

    }
    global String start() {
        return null;
    }
    global String start(Object optionsObject) {
        return null;
    }
    global String start(String sessionId) {
        return null;
    }
    global void stop() {

    }
    global void submit(String formLocator) {

    }
    global void type(String field, String value) {

    }
    global void typeKeys(String locator, String value) {

    }
    global void uncheck(String locator) {

    }
    global void useXpathLibrary(String libraryName) {

    }
    global void verifyAlert(String pattern) {

    }
    global void verifyAlertNotPresent() {

    }
    global void verifyAlertPresent() {

    }
    global void verifyAllButtons(String pattern) {

    }
    global void verifyAllFields(String pattern) {

    }
    global void verifyAllLinks(String pattern) {

    }
    global void verifyAllWindowIds(String pattern) {

    }
    global void verifyAllWindowNames(String pattern) {

    }
    global void verifyAllWindowTitles(String pattern) {

    }
    global void verifyBodyText(String pattern) {

    }
    global void verifyChecked(String locator) {

    }
    global void verifyConfirmation(String pattern) {

    }
    global void verifyConfirmationNotPresent() {

    }
    global void verifyConfirmationPresent() {

    }
    global void verifyCookie(String pattern) {

    }
    global void verifyCookieByName(String name, String pattern) {

    }
    global void verifyCookieNotPresent(String name) {

    }
    global void verifyCookiePresent(String name) {

    }
    global void verifyCursorPosition(String locator, String pattern) {

    }
    global void verifyEditable(String locator) {

    }
    global void verifyElementHeight(String locator, String pattern) {

    }
    global void verifyElementIndex(String locator, String pattern) {

    }
    global void verifyElementNotPresent(String locator) {

    }
    global void verifyElementPositionLeft(String locator, String pattern) {

    }
    global void verifyElementPositionTop(String locator, String pattern) {

    }
    global void verifyElementPresent(String locator) {

    }
    global void verifyElementWidth(String locator, String pattern) {

    }
    global void verifyEval(String script, String pattern) {

    }
    global void verifyExpression(String expression, String pattern) {

    }
    global void verifyHtmlSource(String pattern) {

    }
    global void verifyLocation(String pattern) {

    }
    global void verifyMouseSpeed(String pattern) {

    }
    global void verifyNotAlert(String pattern) {

    }
    global void verifyNotAllButtons(String pattern) {

    }
    global void verifyNotAllFields(String pattern) {

    }
    global void verifyNotAllLinks(String pattern) {

    }
    global void verifyNotAllWindowIds(String pattern) {

    }
    global void verifyNotAllWindowNames(String pattern) {

    }
    global void verifyNotAllWindowTitles(String pattern) {

    }
    global void verifyNotChecked(String locator) {

    }
    global void verifyNotConfirmation(String pattern) {

    }
    global void verifyNotCookie(String pattern) {

    }
    global void verifyNotCookieByName(String name, String pattern) {

    }
    global void verifyNotCursorPosition(String locator, String pattern) {

    }
    global void verifyNotEditable(String locator) {

    }
    global void verifyNotElementHeight(String locator, String pattern) {

    }
    global void verifyNotElementIndex(String locator, String pattern) {

    }
    global void verifyNotElementPositionLeft(String locator, String pattern) {

    }
    global void verifyNotElementPositionTop(String locator, String pattern) {

    }
    global void verifyNotElementWidth(String locator, String pattern) {

    }
    global void verifyNotEval(String script, String pattern) {

    }
    global void verifyNotExpression(String expression, String pattern) {

    }
    global void verifyNotHtmlSource(String pattern) {

    }
    global void verifyNotLocation(String pattern) {

    }
    global void verifyNotMouseSpeed(String pattern) {

    }
    global void verifyTextAbsent(String pattern) {

    }
    global void verifyTextPresent(String pattern) {

    }
    global void waitForCondition(String script, String timeout) {

    }
    global void waitForElementPresent(String locator) {

    }
    global void waitForFrameToLoad(String frameAddress, String timeout) {

    }
    global void waitForPageToLoad(String timeout) {

    }
    global void waitForPopUp(String windowID, String timeout) {

    }
    global void windowFocus() {

    }
    global void windowMaximize() {

    }
}
